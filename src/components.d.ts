/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface MilungAmbulanceWlApp {
        "ambulanceId": string;
        "apiBase": string;
        "basePath": string;
    }
    interface MilungAmbulanceWlEditor {
        "entryId": string;
    }
    interface MilungAmbulanceWlList {
        "ambulanceId": string;
        "apiBase": string;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
}
export interface MilungAmbulanceWlEditorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMilungAmbulanceWlEditorElement;
}
export interface MilungAmbulanceWlListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMilungAmbulanceWlListElement;
}
declare global {
    interface HTMLMilungAmbulanceWlAppElement extends Components.MilungAmbulanceWlApp, HTMLStencilElement {
    }
    var HTMLMilungAmbulanceWlAppElement: {
        prototype: HTMLMilungAmbulanceWlAppElement;
        new (): HTMLMilungAmbulanceWlAppElement;
    };
    interface HTMLMilungAmbulanceWlEditorElementEventMap {
        "editor-closed": string;
    }
    interface HTMLMilungAmbulanceWlEditorElement extends Components.MilungAmbulanceWlEditor, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMilungAmbulanceWlEditorElementEventMap>(type: K, listener: (this: HTMLMilungAmbulanceWlEditorElement, ev: MilungAmbulanceWlEditorCustomEvent<HTMLMilungAmbulanceWlEditorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMilungAmbulanceWlEditorElementEventMap>(type: K, listener: (this: HTMLMilungAmbulanceWlEditorElement, ev: MilungAmbulanceWlEditorCustomEvent<HTMLMilungAmbulanceWlEditorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMilungAmbulanceWlEditorElement: {
        prototype: HTMLMilungAmbulanceWlEditorElement;
        new (): HTMLMilungAmbulanceWlEditorElement;
    };
    interface HTMLMilungAmbulanceWlListElementEventMap {
        "entry-clicked": string;
    }
    interface HTMLMilungAmbulanceWlListElement extends Components.MilungAmbulanceWlList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMilungAmbulanceWlListElementEventMap>(type: K, listener: (this: HTMLMilungAmbulanceWlListElement, ev: MilungAmbulanceWlListCustomEvent<HTMLMilungAmbulanceWlListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMilungAmbulanceWlListElementEventMap>(type: K, listener: (this: HTMLMilungAmbulanceWlListElement, ev: MilungAmbulanceWlListCustomEvent<HTMLMilungAmbulanceWlListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMilungAmbulanceWlListElement: {
        prototype: HTMLMilungAmbulanceWlListElement;
        new (): HTMLMilungAmbulanceWlListElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLElementTagNameMap {
        "milung-ambulance-wl-app": HTMLMilungAmbulanceWlAppElement;
        "milung-ambulance-wl-editor": HTMLMilungAmbulanceWlEditorElement;
        "milung-ambulance-wl-list": HTMLMilungAmbulanceWlListElement;
        "my-component": HTMLMyComponentElement;
    }
}
declare namespace LocalJSX {
    interface MilungAmbulanceWlApp {
        "ambulanceId"?: string;
        "apiBase"?: string;
        "basePath"?: string;
    }
    interface MilungAmbulanceWlEditor {
        "entryId"?: string;
        "onEditor-closed"?: (event: MilungAmbulanceWlEditorCustomEvent<string>) => void;
    }
    interface MilungAmbulanceWlList {
        "ambulanceId"?: string;
        "apiBase"?: string;
        "onEntry-clicked"?: (event: MilungAmbulanceWlListCustomEvent<string>) => void;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface IntrinsicElements {
        "milung-ambulance-wl-app": MilungAmbulanceWlApp;
        "milung-ambulance-wl-editor": MilungAmbulanceWlEditor;
        "milung-ambulance-wl-list": MilungAmbulanceWlList;
        "my-component": MyComponent;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "milung-ambulance-wl-app": LocalJSX.MilungAmbulanceWlApp & JSXBase.HTMLAttributes<HTMLMilungAmbulanceWlAppElement>;
            "milung-ambulance-wl-editor": LocalJSX.MilungAmbulanceWlEditor & JSXBase.HTMLAttributes<HTMLMilungAmbulanceWlEditorElement>;
            "milung-ambulance-wl-list": LocalJSX.MilungAmbulanceWlList & JSXBase.HTMLAttributes<HTMLMilungAmbulanceWlListElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
        }
    }
}
